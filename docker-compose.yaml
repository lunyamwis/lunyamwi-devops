version: "3"

services:

  api:
    image: lunyamwimages/boostedchatapi-dev:latest
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - web-django:/usr/src/app
      - web-static:/usr/src/app/static
    env_file:
      - .env
    entrypoint: ["/bin/bash", "+x", "/entrypoint.sh"]
    

  postgres:
    image: postgres:latest
    container_name: postgres-container
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DBNAME}
    volumes:
      - /opt/postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    

  postgres-promptfactory:
    image: postgres:latest
    container_name: postgres-promptfactory-container
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_PROMPTFACTORY_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PROMPTFACTORY_PASSWORD}
      POSTGRES_DB: ${POSTGRES_PROMPTFACTORY_DBNAME}
    volumes:
      - /opt/postgres-promptfactory-data:/var/lib/postgresql/data
    ports:
      - "5434:5434"
    

  client:
    image: lunyamwimages/boostedchatui-dev:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - web-root:/usr/share/nginx/html
      - ./nginx-conf/:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./dhparam:/etc/ssl/certs
      - /opt/cloudflare:/etc/letsencrypt/cloudflare.ini:ro
    

  certbot:
    image: certbot/dns-cloudflare:latest
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/usr/share/nginx/html
      - ./scripts/certbot-entrypoint.sh:/certbot-entrypoint.sh # Mounting the script
      - /opt/cloudflare:/etc/letsencrypt/cloudflare.ini:ro
    entrypoint: ["/bin/sh", "-c"]
    depends_on:
      - client
    command: /certbot-entrypoint.sh
    

  mqtt:
    image: lunyamwimages/boostedchatmqtt-dev:latest
    restart: always
    ports:
      - "1883:1883"
      - "8883:8883"
      - "3000:3000"
    volumes:
      - ../mqtt-logs:/usr/src/app/logs
    env_file:
      - .env
    

  prompt:
    image: lunyamwimages/promptfactory-dev:latest
    restart: always
    depends_on:
      - api
    ports:
      - "8001:8001"
    
    env_file:
      - .env

  
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq
    restart: always
    

  redis1:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    ports:
      - "6380:6379"
    volumes:
      - redisdata1:/data
    

  web:
    restart: always
    image: lunyamwimages/scrapper-dev:latest
    expose:
      - "8003"
    ports:
      - "8003:8003"
    links:
      - redis:redis
    volumes:
      - web-django:/usr/src/app
      - web-static:/usr/src/app/static
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    
    env_file:
      - .env
    environment:
      DEBUG: "true"
    entrypoint: ["/bin/bash", "+x", "/entrypoint.sh"]

  postgresetl:
    image: postgres:latest
    container_name: postgres-etl-container
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME_ETL}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_ETL}
      POSTGRES_DB: ${POSTGRES_DBNAME_ETL}
    volumes:
      - /opt/postgres-etl-data:/var/lib/postgresql/data
    expose:
      - "5433"
    ports:
      - "5433:5433"
    

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    

  airflow-api-server:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - redis
      - postgresetl
    
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
      DEBUG: "true"
    env_file:
      - .env

  airflow-dag-processor:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    env_file:
      - .env

  airflow-scheduler:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    command: scheduler
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      - redis
      - postgresetl
    
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'

  airflow-worker:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    command: celery worker
    restart: always
    depends_on:
      - redis
      - postgresetl
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    

  airflow-triggerer:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    command: triggerer
    restart: always
    depends_on:
      - redis
      - postgresetl
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0

  airflow-init:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\\033[1;33mWARNING!!!: AIRFLOW_UID not set!\\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo " See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\\033[1;33mWARNING!!!: Not enough memory available for Docker.\\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo " https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:${POSTGRES_PASSWORD_ETL}@postgresetl:5433/etl
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      
    env_file:
      - .env

    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    depends_on:
      - redis
      - postgresetl
    

  airflow-cli:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    profiles:
      - debug
    environment:
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    

  flower:
    image: ${AIRFLOW_IMAGE_NAME:-my-airflow:custom}
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - redis
      - postgresetl
    

volumes:

  web-django:

  web-static:

  certbot-etc:

  certbot-var:

  rabbitmq-data:

  rabbitmq-log:

  web-root:

  dhparam:

  redisdata1:

  redisdata:

  postgres-etl-data:
